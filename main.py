import telebot
from config import token
from collections import defaultdict
from logic import quiz_questions

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)
user_responses = defaultdict(int)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
points = defaultdict(int)

bot = telebot.TeleBot(token)

def send_question(chat_id):
    question = quiz_questions[user_responses[chat_id]]
    bot.send_message(chat_id, question.text, reply_markup=question.gen_markup())

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
    if call.data == "correct":
        bot.answer_callback_query(call.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ")
        points[chat_id] += 1  # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    else:
        bot.answer_callback_query(call.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_responses[chat_id] += 1  

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    if user_responses[chat_id] >= len(quiz_questions):
        bot.send_message(chat_id, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª! üéâ\n–¢–≤–æ–∏ –æ—á–∫–∏: {points[chat_id]} / {len(quiz_questions)}")
        # –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        del user_responses[chat_id]
        del points[chat_id]
    else:
        send_question(chat_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    if chat_id not in user_responses:
        user_responses[chat_id] = 0
        send_question(chat_id)

bot.infinity_polling()
